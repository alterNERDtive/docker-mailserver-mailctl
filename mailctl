#!/bin/bash

# SETUP --------------------------------------------------------------

DIR=/mail	# docker-compose directory
CONTAINER=mail	# docker container name
TIMEOUT=3600	# a lot of time for a graceful container stop
DOCKER=docker # name of your container management command, e.g. podman

# --------------------------------------------------------------------

VER=0.17.0

set -ueo pipefail

if [ -z "$DIR" ] || [ -z "$CONTAINER" ] || [ -z "$TIMEOUT" ]; then
	echo "Error: Not all setup variables are set."
	echo
	echo "You can configure them in '$0'"
	echo
	exit 1
fi >&2

_checkBin() {
	local cmd
	for cmd in "$@"; do
		hash "$cmd" 2>/dev/null || {
			echo "Error: '$cmd' not found."
			echo
			exit 1
		} >&2
	done
}

# Dependencies
_checkBin "cat" "cut" "${DOCKER}" "${DOCKER}-compose" "fold" "jq" "printf" "sed" "tail" "tput" "tr"

# Check if container is running
# Skip check, if first argument is empty, "status" or "start"
if [ -n "${1:-}" ] && [ "${1:-}" != "status" ] && [ "${1:-}" != "start" ] && [ "${1:-}" != "restart" ]; then
	if [ -z "$(${DOCKER} ps -q --filter "name=^$CONTAINER$")" ]; then
		echo -e "Error: Container '$CONTAINER' is not up.\n" >&2
		exit 1
	fi
fi

cd "$DIR" &>/dev/null || {
	echo "Error: Could not change directory to '$DIR'."
	echo
	echo "Check if 'DIR' is correctly defined in the script setup section."
	echo
	exit 1
} >&2

# Print status
_status() {
	# $1	name
	# $2	status
	local indent spaces status
	indent=14

	# Wrap long lines and prepend spaces to multi line status
	spaces=$(printf "%${indent}s")
	status=$(echo -n "$2" | fold -s -w $(($(tput cols) - 16)) | sed "s/^/$spaces/g")
	status=${status:$indent}

	printf "%-${indent}s%s\n" "$1:" "$status"
}

case "${1:-}" in
	status) # Show status
		if [ -n "$(${DOCKER} ps -q --filter "name=^$CONTAINER$")" ]; then
			# Container uptime
			_status "Container" "$(${DOCKER} ps --no-trunc --filter "name=^$CONTAINER$" --format "{{.Status}}")"

			# Version
			_status "Version" "$(${DOCKER} exec "$CONTAINER" cat /VERSION)"

			# Fail2ban
			${DOCKER} exec "$CONTAINER" ls /var/run/fail2ban/fail2ban.sock &>/dev/null &&
			_status "Fail2ban" "$(${DOCKER} exec "$CONTAINER" fail2ban)"

			# Package updates available?
			_status "Packages" "$(${DOCKER} exec "$CONTAINER" bash -c 'apt -q update 2>/dev/null | grep "All packages are up to date" || echo "Updates available"')"

			# Published ports
			_status "Ports" "$(${DOCKER} inspect "$CONTAINER" | jq -r '.[].NetworkSettings.Ports | .[] | select(. != null) | tostring' | cut -d'"' -f8 | tr "\n" " ")"

			# Postfix mail queue
			POSTFIX=$(${DOCKER} exec "$CONTAINER" postqueue -p | tail -1 | cut -d' ' -f5)
			[ -z "$POSTFIX" ] && POSTFIX="Mail queue is empty" || POSTFIX+=" mail(s) queued"
			_status "Postfix" "$POSTFIX"

			# Service status
			_status "Supervisor" "$(${DOCKER} exec "$CONTAINER" supervisorctl status | sort -b -k2,2)"
		else
			echo "Container: down"
		fi
		;;

	config)	# show configuration
		${DOCKER} exec "$CONTAINER" cat /etc/dms-settings
		;;

	start)	# Start container
		if [ -n "$(${DOCKER} ps -q --filter "name=^$CONTAINER$")" ]; then
			echo "Container '$CONTAINER' is already up."
			echo
			exit
		fi
		# If container is stopped, remove container / network etc.
		${DOCKER}-compose down -t "$TIMEOUT" 2>/dev/null || true
		${DOCKER}-compose up -d
		;;

	stop)	# Stop container
		${DOCKER}-compose down -t "$TIMEOUT"
		;;

	resta*)	#  Restart container
		${DOCKER}-compose down -t "$TIMEOUT"
		${DOCKER}-compose up -d
		;;

	setup)  # Invoke 'setup.sh'
		if [ ! -x "setup.sh" ]; then
			echo "Error: '$DIR/setup.sh' does not exist or is not executable."
			echo
			echo "To fix, run 'curl -o setup.sh https://raw.githubusercontent.com/docker-mailserver/docker-mailserver/master/setup.sh; chmod a+x ./setup.sh' in '$DIR'."
			echo
			exit 1
		fi >&2
		shift
		./setup.sh "$@"
		;;

	queue)	# Show mail queue
		${DOCKER} exec "$CONTAINER" postqueue -p
		;;

	flush)	# Flush mail queue
		${DOCKER} exec "$CONTAINER" postqueue -f
		echo "Queue flushed."
		;;

	view)	# Show mail by queue id
		if [ -z "${2:-}" ]; then
			echo "Error: Queue ID missing."
		else
			${DOCKER} exec "$CONTAINER" postcat -q "$2"
		fi >&2
		;;

	delete) # Delete mail by queue id
		if [ -z "${2:-}" ]; then
			echo "Error: Queue ID missing."
		else
			shift
			for i in "$@"; do
				ARG+=("-d" "$i")
			done
			${DOCKER} exec "$CONTAINER" postsuper "${ARG[@]}"
		fi
		;;

	fail*)	# Interact with fail2ban
		shift
		${DOCKER} exec "$CONTAINER" fail2ban "$@"
		;;

	ports)	# Show published ports
		echo "Published ports:"
		echo
		${DOCKER} inspect "$CONTAINER" | jq -r '.[].NetworkSettings.Ports | .[] | select(. != null) | tostring' | cut -d'"' -f4,8 | sed 's/"/:/g'
		;;

	postc*)	# Show postfix configuration
		shift
		${DOCKER} exec "$CONTAINER" postconf "$@"
		;;

	logs)	# Show logs
		if [ "${2:-}" == "-f" ]; then
			${DOCKER} logs -f "$CONTAINER"
		else
			${DOCKER} logs "$CONTAINER"
		fi
		;;

	login)	# Run container shell
		${DOCKER} exec -it "$CONTAINER" bash
		;;

	super*) # Interact with supervisorctl
		shift
		${DOCKER} exec -it "$CONTAINER" supervisorctl "$@"
		;;

	update-c*) # Check for container package updates
		${DOCKER} exec -it "$CONTAINER" bash -c 'apt update && echo && apt list --upgradable'
		;;

	update-p*) # Update container packages
		${DOCKER} exec -it "$CONTAINER" bash -c 'apt update && echo && apt-get upgrade'
		;;

	version*) # Show versions
		DMS_VER="$(${DOCKER} exec "$CONTAINER" cat /VERSION)"
		printf "%-15s%s\n\n" "Mailserver:" "$DMS_VER"
		PACKAGES=("amavisd-new" "clamav" "dovecot-core" "fail2ban" "opendkim" "opendmarc" "postfix" "spamassassin" "supervisor")
		for i in "${PACKAGES[@]}"; do
			printf "%-15s" "$i:"
			${DOCKER} exec "$CONTAINER" bash -c "dpkg -s $i | grep ^Version | cut -d' ' -f2"
		done
		;;

	*)
		APP=${0##*/}
		cat <<-EOF
		$APP $VER

		Usage:

		$APP status                           Show status
		$APP config                           Show configuration
		$APP start                            Start container
		$APP stop                             Stop container
		$APP restart                          Restart container
		$APP setup                            Invoke 'setup.sh'
		$APP queue                            Show mail queue
		$APP flush                            Flush mail queue
		$APP view   <queue id>                Show mail by queue id
		$APP delete <queue id> [<queue id>]   Delete mail by queue id
		$APP delete ALL                       Delete all queued mails
		$APP fail2ban [<ban|unban> <IP>]      Interact with fail2ban
		$APP ports                            Show published ports
		$APP postconf                         Show postfix configuration
		$APP logs [-f]                        Show logs. Use -f to 'follow' the logs
		$APP login                            Run container shell
		$APP supervisor                       Interact with supervisorctl
		$APP update-check                     Check for container package updates
		$APP update-packages                  Update container packages
		$APP versions                         Show versions
		EOF
		;;
esac
echo
